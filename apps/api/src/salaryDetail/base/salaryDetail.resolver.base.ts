/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SalaryDetail } from "./SalaryDetail";
import { SalaryDetailCountArgs } from "./SalaryDetailCountArgs";
import { SalaryDetailFindManyArgs } from "./SalaryDetailFindManyArgs";
import { SalaryDetailFindUniqueArgs } from "./SalaryDetailFindUniqueArgs";
import { CreateSalaryDetailArgs } from "./CreateSalaryDetailArgs";
import { UpdateSalaryDetailArgs } from "./UpdateSalaryDetailArgs";
import { DeleteSalaryDetailArgs } from "./DeleteSalaryDetailArgs";
import { JobFindManyArgs } from "../../job/base/JobFindManyArgs";
import { Job } from "../../job/base/Job";
import { SalaryDetailService } from "../salaryDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SalaryDetail)
export class SalaryDetailResolverBase {
  constructor(
    protected readonly service: SalaryDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SalaryDetail",
    action: "read",
    possession: "any",
  })
  async _salaryDetailsMeta(
    @graphql.Args() args: SalaryDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SalaryDetail])
  @nestAccessControl.UseRoles({
    resource: "SalaryDetail",
    action: "read",
    possession: "any",
  })
  async salaryDetails(
    @graphql.Args() args: SalaryDetailFindManyArgs
  ): Promise<SalaryDetail[]> {
    return this.service.salaryDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SalaryDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SalaryDetail",
    action: "read",
    possession: "own",
  })
  async salaryDetail(
    @graphql.Args() args: SalaryDetailFindUniqueArgs
  ): Promise<SalaryDetail | null> {
    const result = await this.service.salaryDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalaryDetail)
  @nestAccessControl.UseRoles({
    resource: "SalaryDetail",
    action: "create",
    possession: "any",
  })
  async createSalaryDetail(
    @graphql.Args() args: CreateSalaryDetailArgs
  ): Promise<SalaryDetail> {
    return await this.service.createSalaryDetail({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalaryDetail)
  @nestAccessControl.UseRoles({
    resource: "SalaryDetail",
    action: "update",
    possession: "any",
  })
  async updateSalaryDetail(
    @graphql.Args() args: UpdateSalaryDetailArgs
  ): Promise<SalaryDetail | null> {
    try {
      return await this.service.updateSalaryDetail({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalaryDetail)
  @nestAccessControl.UseRoles({
    resource: "SalaryDetail",
    action: "delete",
    possession: "any",
  })
  async deleteSalaryDetail(
    @graphql.Args() args: DeleteSalaryDetailArgs
  ): Promise<SalaryDetail | null> {
    try {
      return await this.service.deleteSalaryDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Job], { name: "jobs" })
  @nestAccessControl.UseRoles({
    resource: "Job",
    action: "read",
    possession: "any",
  })
  async findJobs(
    @graphql.Parent() parent: SalaryDetail,
    @graphql.Args() args: JobFindManyArgs
  ): Promise<Job[]> {
    const results = await this.service.findJobs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}

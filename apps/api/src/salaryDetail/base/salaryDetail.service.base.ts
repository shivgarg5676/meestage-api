/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SalaryDetail as PrismaSalaryDetail,
  Job as PrismaJob,
} from "@prisma/client";

export class SalaryDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SalaryDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.salaryDetail.count(args);
  }

  async salaryDetails<T extends Prisma.SalaryDetailFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalaryDetailFindManyArgs>
  ): Promise<PrismaSalaryDetail[]> {
    return this.prisma.salaryDetail.findMany<Prisma.SalaryDetailFindManyArgs>(
      args
    );
  }
  async salaryDetail<T extends Prisma.SalaryDetailFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalaryDetailFindUniqueArgs>
  ): Promise<PrismaSalaryDetail | null> {
    return this.prisma.salaryDetail.findUnique(args);
  }
  async createSalaryDetail<T extends Prisma.SalaryDetailCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalaryDetailCreateArgs>
  ): Promise<PrismaSalaryDetail> {
    return this.prisma.salaryDetail.create<T>(args);
  }
  async updateSalaryDetail<T extends Prisma.SalaryDetailUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalaryDetailUpdateArgs>
  ): Promise<PrismaSalaryDetail> {
    return this.prisma.salaryDetail.update<T>(args);
  }
  async deleteSalaryDetail<T extends Prisma.SalaryDetailDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SalaryDetailDeleteArgs>
  ): Promise<PrismaSalaryDetail> {
    return this.prisma.salaryDetail.delete(args);
  }

  async findJobs(
    parentId: string,
    args: Prisma.JobFindManyArgs
  ): Promise<PrismaJob[]> {
    return this.prisma.salaryDetail
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .jobs(args);
  }
}

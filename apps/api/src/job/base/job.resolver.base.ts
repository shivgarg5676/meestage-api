/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Job } from "./Job";
import { JobCountArgs } from "./JobCountArgs";
import { JobFindManyArgs } from "./JobFindManyArgs";
import { JobFindUniqueArgs } from "./JobFindUniqueArgs";
import { CreateJobArgs } from "./CreateJobArgs";
import { UpdateJobArgs } from "./UpdateJobArgs";
import { DeleteJobArgs } from "./DeleteJobArgs";
import { Company } from "../../company/base/Company";
import { SalaryDetail } from "../../salaryDetail/base/SalaryDetail";
import { JobService } from "../job.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Job)
export class JobResolverBase {
  constructor(
    protected readonly service: JobService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Job",
    action: "read",
    possession: "any",
  })
  async _jobsMeta(
    @graphql.Args() args: JobCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Job])
  @nestAccessControl.UseRoles({
    resource: "Job",
    action: "read",
    possession: "any",
  })
  async jobs(@graphql.Args() args: JobFindManyArgs): Promise<Job[]> {
    return this.service.jobs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Job, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Job",
    action: "read",
    possession: "own",
  })
  async job(@graphql.Args() args: JobFindUniqueArgs): Promise<Job | null> {
    const result = await this.service.job(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Job)
  @nestAccessControl.UseRoles({
    resource: "Job",
    action: "create",
    possession: "any",
  })
  async createJob(@graphql.Args() args: CreateJobArgs): Promise<Job> {
    return await this.service.createJob({
      ...args,
      data: {
        ...args.data,

        company: args.data.company
          ? {
              connect: args.data.company,
            }
          : undefined,

        salaryDetail: args.data.salaryDetail
          ? {
              connect: args.data.salaryDetail,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Job)
  @nestAccessControl.UseRoles({
    resource: "Job",
    action: "update",
    possession: "any",
  })
  async updateJob(@graphql.Args() args: UpdateJobArgs): Promise<Job | null> {
    try {
      return await this.service.updateJob({
        ...args,
        data: {
          ...args.data,

          company: args.data.company
            ? {
                connect: args.data.company,
              }
            : undefined,

          salaryDetail: args.data.salaryDetail
            ? {
                connect: args.data.salaryDetail,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Job)
  @nestAccessControl.UseRoles({
    resource: "Job",
    action: "delete",
    possession: "any",
  })
  async deleteJob(@graphql.Args() args: DeleteJobArgs): Promise<Job | null> {
    try {
      return await this.service.deleteJob(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Company, {
    nullable: true,
    name: "company",
  })
  @nestAccessControl.UseRoles({
    resource: "Company",
    action: "read",
    possession: "any",
  })
  async getCompany(@graphql.Parent() parent: Job): Promise<Company | null> {
    const result = await this.service.getCompany(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SalaryDetail, {
    nullable: true,
    name: "salaryDetail",
  })
  @nestAccessControl.UseRoles({
    resource: "SalaryDetail",
    action: "read",
    possession: "any",
  })
  async getSalaryDetail(
    @graphql.Parent() parent: Job
  ): Promise<SalaryDetail | null> {
    const result = await this.service.getSalaryDetail(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
